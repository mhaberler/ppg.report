{"version":3,"file":"ReportMetadata-BYJ8W3Mo.js","sources":["../../node_modules/date-fns/constructNow.mjs","../../node_modules/date-fns/differenceInCalendarMonths.mjs","../../node_modules/date-fns/endOfDay.mjs","../../node_modules/date-fns/endOfMonth.mjs","../../node_modules/date-fns/isLastDayOfMonth.mjs","../../node_modules/date-fns/differenceInMonths.mjs","../../node_modules/date-fns/differenceInSeconds.mjs","../../node_modules/date-fns/formatDistance.mjs","../../node_modules/date-fns/formatDistanceToNow.mjs","../../node_modules/react-leaflet/lib/FeatureGroup.js","../../node_modules/react-leaflet/lib/Marker.js","../../node_modules/react-leaflet/lib/Rectangle.js","../../src/DataList.tsx","../../src/shared/CopyToClipboard.tsx","../../src/features/rap/extra/reportMetadata/PointInfo.tsx","../../src/features/rap/extra/reportMetadata/plane.svg?react","../../src/features/rap/extra/reportMetadata/Legend.tsx","../../src/features/rap/extra/reportMetadata/RefreshInformation.tsx","../../src/shared/Parallax.tsx","../../src/features/rap/extra/reportMetadata/ReportMetadata.tsx"],"sourcesContent":["import { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name constructNow\n * @category Generic Helpers\n * @summary Constructs a new current date using the passed value constructor.\n * @pure false\n *\n * @description\n * The function constructs a new current date using the constructor from\n * the reference date. It helps to build generic functions that accept date\n * extensions and use the current date.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n *\n * @returns Current date initialized using the given date constructor\n *\n * @example\n * import { constructNow, isSameDay } from 'date-fns'\n *\n * function isToday<DateType extends Date>(\n *   date: DateType | number | string,\n * ): boolean {\n *   // If we were to use `new Date()` directly, the function would  behave\n *   // differently in different timezones and return false for the same date.\n *   return isSameDay(date, constructNow(date));\n * }\n */\nexport function constructNow(date) {\n  return constructFrom(date, Date.now());\n}\n\n// Fallback for modularized imports:\nexport default constructNow;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name differenceInCalendarMonths\n * @category Month Helpers\n * @summary Get the number of calendar months between the given dates.\n *\n * @description\n * Get the number of calendar months between the given dates.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of calendar months\n *\n * @example\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInCalendarMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 8\n */\nexport function differenceInCalendarMonths(dateLeft, dateRight) {\n  const _dateLeft = toDate(dateLeft);\n  const _dateRight = toDate(dateRight);\n\n  const yearDiff = _dateLeft.getFullYear() - _dateRight.getFullYear();\n  const monthDiff = _dateLeft.getMonth() - _dateRight.getMonth();\n\n  return yearDiff * 12 + monthDiff;\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarMonths;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name endOfDay\n * @category Day Helpers\n * @summary Return the end of a day for the given date.\n *\n * @description\n * Return the end of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The end of a day\n *\n * @example\n * // The end of a day for 2 September 2014 11:55:00:\n * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 23:59:59.999\n */\nexport function endOfDay(date) {\n  const _date = toDate(date);\n  _date.setHours(23, 59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfDay;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The end of a month\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\nexport function endOfMonth(date) {\n  const _date = toDate(date);\n  const month = _date.getMonth();\n  _date.setFullYear(_date.getFullYear(), month + 1, 0);\n  _date.setHours(23, 59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfMonth;\n","import { endOfDay } from \"./endOfDay.mjs\";\nimport { endOfMonth } from \"./endOfMonth.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name isLastDayOfMonth\n * @category Month Helpers\n * @summary Is the given date the last day of a month?\n *\n * @description\n * Is the given date the last day of a month?\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n\n * @returns The date is the last day of a month\n *\n * @example\n * // Is 28 February 2014 the last day of a month?\n * const result = isLastDayOfMonth(new Date(2014, 1, 28))\n * //=> true\n */\nexport function isLastDayOfMonth(date) {\n  const _date = toDate(date);\n  return +endOfDay(_date) === +endOfMonth(_date);\n}\n\n// Fallback for modularized imports:\nexport default isLastDayOfMonth;\n","import { compareAsc } from \"./compareAsc.mjs\";\nimport { differenceInCalendarMonths } from \"./differenceInCalendarMonths.mjs\";\nimport { isLastDayOfMonth } from \"./isLastDayOfMonth.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name differenceInMonths\n * @category Month Helpers\n * @summary Get the number of full months between the given dates.\n *\n * @description\n * Get the number of full months between the given dates using trunc as a default rounding method.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of full months\n *\n * @example\n * // How many full months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\n * //=> 7\n */\nexport function differenceInMonths(dateLeft, dateRight) {\n  const _dateLeft = toDate(dateLeft);\n  const _dateRight = toDate(dateRight);\n\n  const sign = compareAsc(_dateLeft, _dateRight);\n  const difference = Math.abs(\n    differenceInCalendarMonths(_dateLeft, _dateRight),\n  );\n  let result;\n\n  // Check for the difference of less than month\n  if (difference < 1) {\n    result = 0;\n  } else {\n    if (_dateLeft.getMonth() === 1 && _dateLeft.getDate() > 27) {\n      // This will check if the date is end of Feb and assign a higher end of month date\n      // to compare it with Jan\n      _dateLeft.setDate(30);\n    }\n\n    _dateLeft.setMonth(_dateLeft.getMonth() - sign * difference);\n\n    // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full\n    // If so, result must be decreased by 1 in absolute value\n    let isLastMonthNotFull = compareAsc(_dateLeft, _dateRight) === -sign;\n\n    // Check for cases of one full calendar month\n    if (\n      isLastDayOfMonth(toDate(dateLeft)) &&\n      difference === 1 &&\n      compareAsc(dateLeft, _dateRight) === 1\n    ) {\n      isLastMonthNotFull = false;\n    }\n\n    result = sign * (difference - Number(isLastMonthNotFull));\n  }\n\n  // Prevent negative zero\n  return result === 0 ? 0 : result;\n}\n\n// Fallback for modularized imports:\nexport default differenceInMonths;\n","import { getRoundingMethod } from \"./_lib/getRoundingMethod.mjs\";\nimport { differenceInMilliseconds } from \"./differenceInMilliseconds.mjs\";\n\n/**\n * The {@link differenceInSeconds} function options.\n */\n\n/**\n * @name differenceInSeconds\n * @category Second Helpers\n * @summary Get the number of seconds between the given dates.\n *\n * @description\n * Get the number of seconds between the given dates.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of seconds\n *\n * @example\n * // How many seconds are between\n * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?\n * const result = differenceInSeconds(\n *   new Date(2014, 6, 2, 12, 30, 20, 0),\n *   new Date(2014, 6, 2, 12, 30, 7, 999)\n * )\n * //=> 12\n */\nexport function differenceInSeconds(dateLeft, dateRight, options) {\n  const diff = differenceInMilliseconds(dateLeft, dateRight) / 1000;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInSeconds;\n","import { compareAsc } from \"./compareAsc.mjs\";\nimport { minutesInDay, minutesInMonth } from \"./constants.mjs\";\nimport { differenceInMonths } from \"./differenceInMonths.mjs\";\nimport { differenceInSeconds } from \"./differenceInSeconds.mjs\";\nimport { toDate } from \"./toDate.mjs\";\nimport { defaultLocale } from \"./_lib/defaultLocale.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\nimport { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.mjs\";\n\n/**\n * The {@link formatDistance} function options.\n */\n\n/**\n * @name formatDistance\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words.\n *\n * | Distance between dates                                            | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance between dates | Result               |\n * |------------------------|----------------------|\n * | 0 secs ... 5 secs      | less than 5 seconds  |\n * | 5 secs ... 10 secs     | less than 10 seconds |\n * | 10 secs ... 20 secs    | less than 20 seconds |\n * | 20 secs ... 40 secs    | half a minute        |\n * | 40 secs ... 60 secs    | less than a minute   |\n * | 60 secs ... 90 secs    | 1 minute             |\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date\n * @param baseDate - The date to compare with\n * @param options - An object with options\n *\n * @returns The distance in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `baseDate` must not be Invalid Date\n * @throws `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00, including seconds?\n * const result = formatDistance(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0),\n *   { includeSeconds: true }\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> 'about 1 year ago'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> 'pli ol 1 jaro'\n */\n\nexport function formatDistance(date, baseDate, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n  const minutesInAlmostTwoDays = 2520;\n\n  const comparison = compareAsc(date, baseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const localizeOptions = Object.assign({}, options, {\n    addSuffix: options?.addSuffix,\n    comparison: comparison,\n  });\n\n  let dateLeft;\n  let dateRight;\n  if (comparison > 0) {\n    dateLeft = toDate(baseDate);\n    dateRight = toDate(date);\n  } else {\n    dateLeft = toDate(date);\n    dateRight = toDate(baseDate);\n  }\n\n  const seconds = differenceInSeconds(dateRight, dateLeft);\n  const offsetInSeconds =\n    (getTimezoneOffsetInMilliseconds(dateRight) -\n      getTimezoneOffsetInMilliseconds(dateLeft)) /\n    1000;\n  const minutes = Math.round((seconds - offsetInSeconds) / 60);\n  let months;\n\n  // 0 up to 2 mins\n  if (minutes < 2) {\n    if (options?.includeSeconds) {\n      if (seconds < 5) {\n        return locale.formatDistance(\"lessThanXSeconds\", 5, localizeOptions);\n      } else if (seconds < 10) {\n        return locale.formatDistance(\"lessThanXSeconds\", 10, localizeOptions);\n      } else if (seconds < 20) {\n        return locale.formatDistance(\"lessThanXSeconds\", 20, localizeOptions);\n      } else if (seconds < 40) {\n        return locale.formatDistance(\"halfAMinute\", 0, localizeOptions);\n      } else if (seconds < 60) {\n        return locale.formatDistance(\"lessThanXMinutes\", 1, localizeOptions);\n      } else {\n        return locale.formatDistance(\"xMinutes\", 1, localizeOptions);\n      }\n    } else {\n      if (minutes === 0) {\n        return locale.formatDistance(\"lessThanXMinutes\", 1, localizeOptions);\n      } else {\n        return locale.formatDistance(\"xMinutes\", minutes, localizeOptions);\n      }\n    }\n\n    // 2 mins up to 0.75 hrs\n  } else if (minutes < 45) {\n    return locale.formatDistance(\"xMinutes\", minutes, localizeOptions);\n\n    // 0.75 hrs up to 1.5 hrs\n  } else if (minutes < 90) {\n    return locale.formatDistance(\"aboutXHours\", 1, localizeOptions);\n\n    // 1.5 hrs up to 24 hrs\n  } else if (minutes < minutesInDay) {\n    const hours = Math.round(minutes / 60);\n    return locale.formatDistance(\"aboutXHours\", hours, localizeOptions);\n\n    // 1 day up to 1.75 days\n  } else if (minutes < minutesInAlmostTwoDays) {\n    return locale.formatDistance(\"xDays\", 1, localizeOptions);\n\n    // 1.75 days up to 30 days\n  } else if (minutes < minutesInMonth) {\n    const days = Math.round(minutes / minutesInDay);\n    return locale.formatDistance(\"xDays\", days, localizeOptions);\n\n    // 1 month up to 2 months\n  } else if (minutes < minutesInMonth * 2) {\n    months = Math.round(minutes / minutesInMonth);\n    return locale.formatDistance(\"aboutXMonths\", months, localizeOptions);\n  }\n\n  months = differenceInMonths(dateRight, dateLeft);\n\n  // 2 months up to 12 months\n  if (months < 12) {\n    const nearestMonth = Math.round(minutes / minutesInMonth);\n    return locale.formatDistance(\"xMonths\", nearestMonth, localizeOptions);\n\n    // 1 year up to max Date\n  } else {\n    const monthsSinceStartOfYear = months % 12;\n    const years = Math.trunc(months / 12);\n\n    // N years up to 1 years 3 months\n    if (monthsSinceStartOfYear < 3) {\n      return locale.formatDistance(\"aboutXYears\", years, localizeOptions);\n\n      // N years 3 months up to N years 9 months\n    } else if (monthsSinceStartOfYear < 9) {\n      return locale.formatDistance(\"overXYears\", years, localizeOptions);\n\n      // N years 9 months up to N year 12 months\n    } else {\n      return locale.formatDistance(\"almostXYears\", years + 1, localizeOptions);\n    }\n  }\n}\n\n// Fallback for modularized imports:\nexport default formatDistance;\n","import { constructNow } from \"./constructNow.mjs\";\nimport { formatDistance } from \"./formatDistance.mjs\";\n\n/**\n * The {@link formatDistanceToNow} function options.\n */\n\n/**\n * @name formatDistanceToNow\n * @category Common Helpers\n * @summary Return the distance between the given date and now in words.\n * @pure false\n *\n * @description\n * Return the distance between the given date and now in words.\n *\n * | Distance to now                                                   | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance to now     | Result               |\n * |---------------------|----------------------|\n * | 0 secs ... 5 secs   | less than 5 seconds  |\n * | 5 secs ... 10 secs  | less than 10 seconds |\n * | 10 secs ... 20 secs | less than 20 seconds |\n * | 20 secs ... 40 secs | half a minute        |\n * | 40 secs ... 60 secs | less than a minute   |\n * | 60 secs ... 90 secs | 1 minute             |\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - The object with options\n *\n * @returns The distance in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `options.locale` must contain `formatDistance` property\n *\n * @example\n * // If today is 1 January 2015, what is the distance to 2 July 2014?\n * const result = formatDistanceToNow(\n *   new Date(2014, 6, 2)\n * )\n * //=> '6 months'\n *\n * @example\n * // If now is 1 January 2015 00:00:00,\n * // what is the distance to 1 January 2015 00:00:15, including seconds?\n * const result = formatDistanceToNow(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   {includeSeconds: true}\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 January 2016, with a suffix?\n * const result = formatDistanceToNow(\n *   new Date(2016, 0, 1),\n *   {addSuffix: true}\n * )\n * //=> 'in about 1 year'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 August 2016 in Esperanto?\n * const eoLocale = require('date-fns/locale/eo')\n * const result = formatDistanceToNow(\n *   new Date(2016, 7, 1),\n *   {locale: eoLocale}\n * )\n * //=> 'pli ol 1 jaro'\n */\nexport function formatDistanceToNow(date, options) {\n  return formatDistance(date, constructNow(date), options);\n}\n\n// Fallback for modularized imports:\nexport default formatDistanceToNow;\n","import { createElementObject, createPathComponent, extendContext } from '@react-leaflet/core';\nimport { FeatureGroup as LeafletFeatureGroup } from 'leaflet';\nexport const FeatureGroup = createPathComponent(function createFeatureGroup({ children: _c , ...options }, ctx) {\n    const group = new LeafletFeatureGroup([], options);\n    return createElementObject(group, extendContext(ctx, {\n        layerContainer: group,\n        overlayContainer: group\n    }));\n});\n","import { createElementObject, createLayerComponent, extendContext } from '@react-leaflet/core';\nimport { Marker as LeafletMarker } from 'leaflet';\nexport const Marker = createLayerComponent(function createMarker({ position , ...options }, ctx) {\n    const marker = new LeafletMarker(position, options);\n    return createElementObject(marker, extendContext(ctx, {\n        overlayContainer: marker\n    }));\n}, function updateMarker(marker, props, prevProps) {\n    if (props.position !== prevProps.position) {\n        marker.setLatLng(props.position);\n    }\n    if (props.icon != null && props.icon !== prevProps.icon) {\n        marker.setIcon(props.icon);\n    }\n    if (props.zIndexOffset != null && props.zIndexOffset !== prevProps.zIndexOffset) {\n        marker.setZIndexOffset(props.zIndexOffset);\n    }\n    if (props.opacity != null && props.opacity !== prevProps.opacity) {\n        marker.setOpacity(props.opacity);\n    }\n    if (marker.dragging != null && props.draggable !== prevProps.draggable) {\n        if (props.draggable === true) {\n            marker.dragging.enable();\n        } else {\n            marker.dragging.disable();\n        }\n    }\n});\n","import { createElementObject, createPathComponent, extendContext } from '@react-leaflet/core';\nimport { Rectangle as LeafletRectangle } from 'leaflet';\nexport const Rectangle = createPathComponent(function createRectangle({ bounds , ...options }, ctx) {\n    const rectangle = new LeafletRectangle(bounds, options);\n    return createElementObject(rectangle, extendContext(ctx, {\n        overlayContainer: rectangle\n    }));\n}, function updateRectangle(layer, props, prevProps) {\n    if (props.bounds !== prevProps.bounds) {\n        layer.setBounds(props.bounds);\n    }\n});\n","import styled from \"@emotion/styled\";\n\nexport const DataList = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n`;\n\nexport const DataListItem = styled.div`\n  display: flex;\n  justify-content: space-between;\n  position: relative;\n\n  > *:first-of-type {\n    opacity: 0.7;\n  }\n\n  &:not(:last-of-type) {\n    &:after {\n      content: \"\";\n      position: absolute;\n      left: 2rem;\n      right: 2rem;\n      bottom: calc(-0.5rem - 1px);\n\n      height: 0.5px;\n      background: #333;\n    }\n  }\n`;\n","import styled from \"@emotion/styled\";\nimport { offset, shift, useFloating } from \"@floating-ui/react-dom\";\nimport { useEffect, useState } from \"react\";\nimport { TooltipContainer } from \"../features/rap/extra/discussion/definition/DefinitionTooltip\";\n\nconst Container = styled.div`\n  cursor: pointer;\n\n  @media (hover: hover) {\n    &:hover {\n      text-decoration: underline;\n    }\n  }\n`;\n\ninterface CopyToClipboardProps {\n  children: string;\n}\n\nexport default function CopyToClipboard({ children }: CopyToClipboardProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const { refs, floatingStyles } = useFloating({\n    open: isOpen,\n    middleware: [shift(), offset(5)],\n  });\n\n  async function onClick() {\n    await navigator.clipboard.writeText(children);\n\n    setIsOpen(true);\n  }\n\n  useEffect(() => {\n    if (!isOpen) return;\n\n    const timeout = setTimeout(() => {\n      setIsOpen(false);\n    }, 1500);\n\n    return () => clearTimeout(timeout);\n  }, [isOpen]);\n\n  return (\n    <>\n      <Container ref={refs.setReference} onClick={onClick}>\n        {children}\n      </Container>\n      {isOpen && (\n        <TooltipContainer ref={refs.setFloating} style={floatingStyles}>\n          Copied to clipboard\n        </TooltipContainer>\n      )}\n    </>\n  );\n}\n","import { useParams } from \"react-router\";\nimport { DataListItem } from \"../../../../DataList\";\nimport { isInstalled } from \"../../../../helpers/device\";\nimport { useAppSelector } from \"../../../../hooks\";\nimport CopyToClipboard from \"../../../../shared/CopyToClipboard\";\nimport {\n  heightUnitFormatter,\n  heightValueFormatter,\n} from \"../../cells/Altitude\";\nimport { getTimezoneOffsetLabel } from \"../../../../helpers/date\";\n\nexport default function PointInfo() {\n  const heightUnit = useAppSelector((state) => state.user.heightUnit);\n  const heightUnitLabel = heightUnitFormatter(heightUnit);\n  const timeZone = useAppSelector((state) => state.weather.timeZone);\n\n  const windsAloft = useAppSelector((state) => state.weather.windsAloft);\n  const weather = useAppSelector((state) => state.weather.weather);\n  const { location } = useParams<\"location\">();\n  const [lat, lon] = (location ?? \"\").split(\",\");\n  const elevation = useAppSelector((state) => state.weather.elevation);\n  if (!lat || !lon) throw new Error(\"lat or lon not defined!\");\n  if (!windsAloft || typeof windsAloft !== \"object\")\n    throw new Error(\"RAP not defined\");\n  if (!timeZone) throw new Error(\"timeZone not defined\");\n\n  const altitudeInM = windsAloft.hours[0].altitudes[0].altitudeInM;\n\n  const showOp40 =\n    typeof windsAloft === \"object\" && windsAloft.source === \"rucSounding\";\n\n  const aloftSource = (() => {\n    switch (windsAloft.source) {\n      case \"openMeteo\":\n        return (\n          <>\n            <a\n              href=\"https://open-meteo.com\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              open-meteo.com\n            </a>{\" \"}\n            / Best model\n          </>\n        );\n      case \"rucSounding\":\n        return (\n          <>\n            <a\n              href=\"https://rucsoundings.noaa.gov\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              rucsoundings.noaa.gov\n            </a>{\" \"}\n            / Op40\n          </>\n        );\n    }\n  })();\n\n  const hourlySource = (() => {\n    if (!weather || typeof weather !== \"object\") return;\n\n    if (\"byUnixTimestamp\" in weather)\n      return (\n        <a\n          href=\"https://open-meteo.com\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          open-meteo.com / Best model\n        </a>\n      );\n\n    return (\n      <a\n        href=\"https://www.weather.gov/documentation/services-web-api\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        api.weather.gov\n      </a>\n    );\n  })();\n\n  return (\n    <>\n      {isInstalled() && (\n        <DataListItem>\n          <div>Coordinates</div>\n          <div>\n            <CopyToClipboard>{`${lat},${lon}`}</CopyToClipboard>\n          </div>\n        </DataListItem>\n      )}\n      <DataListItem>\n        <div>Location elevation</div>\n        <div>\n          {Math.round(\n            heightValueFormatter(elevation ?? -1, heightUnit),\n          ).toLocaleString()}\n          {heightUnitLabel}\n        </div>\n      </DataListItem>\n      {showOp40 && (\n        <DataListItem>\n          <div>Winds aloft gridpoint elevation</div>\n          <div>\n            {Math.round(\n              heightValueFormatter(altitudeInM, heightUnit),\n            ).toLocaleString()}\n            {heightUnitLabel}\n          </div>\n        </DataListItem>\n      )}\n      <DataListItem>\n        <div>Winds aloft</div>\n        <div>{aloftSource}</div>\n      </DataListItem>\n      <DataListItem>\n        <div>Hourly weather</div>\n        <div>{hourlySource}</div>\n      </DataListItem>\n      <DataListItem>\n        <div>Time zone</div>\n        <div>\n          {timeZone} ({getTimezoneOffsetLabel(timeZone)})\n        </div>\n      </DataListItem>\n    </>\n  );\n}\n","import * as React from \"react\";\nconst SvgPlane = (props) => /* @__PURE__ */ React.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", viewBox: \"0 -0.03 45.7 45.73\", ...props }, /* @__PURE__ */ React.createElement(\"path\", { fill: \"currentColor\", d: \"m36.038 16.922 7.873-7.303c1.104-1.018 1.737-2.434 1.768-3.935.029-1.5-.562-2.94-1.623-4.002l-.058-.059C42.936.562 41.496-.028 39.996.001c-1.502.03-2.921.667-3.938 1.77l-7.302 7.873L4.57 1.321c-1.459-.504-2.893-.122-3.346.887L.142 4.631C-.31 5.642.363 6.967 1.71 7.719l18.991 10.612-8.547 9.216-4.842-1.046c-.527-.114-1.059.169-1.259.671l-.725 1.826c-.2.501.005 1.062.467 1.34l5.239 3.146 1.188 1.188 3.146 5.24c.278.461.844.659 1.346.461l1.821-.723c.503-.199.785-.729.672-1.255l-1.057-4.883 9.198-8.531L37.96 43.972c.753 1.348 2.077 2.021 3.089 1.568l2.421-1.082c1.011-.452 1.395-1.888.891-3.347l-8.323-24.189z\" }));\nexport default SvgPlane;\n","import styled from \"@emotion/styled\";\nimport React from \"react\";\nimport { outputP3ColorFromRGB } from \"../../../../helpers/colors\";\nimport PlaneSvg from \"./plane.svg?react\";\n\nconst Container = styled.div`\n  padding: 0.5rem 1rem 0;\n\n  display: flex;\n  flex-direction: column;\n  gap: 0.25rem;\n`;\n\nconst LegendItem = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  font-size: 0.8em;\n`;\n\nconst YourLocation = styled.div`\n  width: 1rem;\n  height: 1rem;\n  border-radius: 1rem;\n  ${outputP3ColorFromRGB([0, 255, 0], \"background\")}\n`;\n\nconst WindsAloft = styled.div`\n  width: 1rem;\n  height: 1rem;\n  border-radius: 2px;\n  background: rgba(50, 0, 255, 0.3);\n  border: 2px solid rgb(50, 0, 255);\n`;\n\nconst NWS = styled.div`\n  width: 1rem;\n  height: 1rem;\n  border-radius: 2px;\n  border: 2px solid;\n  background: rgba(255, 0, 0, 0.3);\n  ${outputP3ColorFromRGB([255, 0, 0], \"border-color\")}\n`;\n\nconst StyledPlaneSvg = styled(PlaneSvg)`\n  ${outputP3ColorFromRGB([255, 180, 0])}\n  width: 1rem;\n`;\n\ninterface LegendProps {\n  showTaf: boolean;\n  showNws: boolean;\n  showOp40: boolean;\n}\n\nexport default function Legend({ showTaf, showNws, showOp40 }: LegendProps) {\n  return (\n    <Container>\n      <LegendItem>\n        <YourLocation />\n        Selected location\n      </LegendItem>\n      {showOp40 && (\n        <LegendItem>\n          <WindsAloft />\n          Op40 Winds Aloft Gridpoint (approx)\n        </LegendItem>\n      )}\n      {showNws && (\n        <LegendItem>\n          <NWS />\n          NWS Hourly Forecast Gridpoint\n        </LegendItem>\n      )}\n      {showTaf && (\n        <LegendItem>\n          <StyledPlaneSvg />\n          Terminal Aerodrome Forecast (TAF) location\n        </LegendItem>\n      )}\n    </Container>\n  );\n}\n","import { differenceInMinutes, formatDistanceToNow } from \"date-fns\";\nimport { useAppSelector } from \"../../../../hooks\";\nimport styled from \"@emotion/styled\";\nimport { DataListItem } from \"../../../../DataList\";\nimport capitalize from \"lodash/capitalize\";\n\nconst Label = styled.div``;\n\nexport default function RefreshInformation() {\n  const windsAloftUpdated = useAppSelector(\n    (state) => state.weather.windsAloftUpdated,\n  );\n\n  return (\n    <>\n      <DataListItem>\n        <Label>Data last fetched</Label>\n        <div\n          css={{\n            color:\n              windsAloftUpdated &&\n              Math.abs(\n                differenceInMinutes(new Date(windsAloftUpdated), new Date()),\n              ) > 30\n                ? \"red\"\n                : undefined,\n          }}\n        >\n          {windsAloftUpdated\n            ? capitalize(\n                formatDistanceToNow(new Date(windsAloftUpdated), {\n                  addSuffix: true,\n                }),\n              )\n            : \"Never\"}\n        </div>\n      </DataListItem>\n      <DataListItem>\n        <Label>Update interval</Label>\n        <div>Every 30 minutes</div>\n      </DataListItem>\n    </>\n  );\n}\n","import React, { useEffect, useRef } from \"react\";\nimport { getScrollParent } from \"../helpers/dom\";\nimport styled from \"@emotion/styled\";\n\ninterface ParallaxProps {\n  speed?: number;\n  children?: React.ReactNode;\n}\n\nconst Container = styled.div`\n  position: relative;\n`;\n\nexport default function Parallax({ speed = 0.5, children }: ParallaxProps) {\n  const parallaxRef = useRef<HTMLDivElement>(null);\n  const scrollParentRef = useRef<HTMLElement | null>(null);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      const parallaxElement = parallaxRef.current;\n      if (!parallaxElement) return;\n\n      const scrollParent = scrollParentRef.current;\n      if (!scrollParent) return;\n\n      const scrollOffset =\n        scrollParent.scrollTop < 0 ? 0 : scrollParent.scrollTop * speed;\n\n      parallaxElement.style.transform = `translateY(${scrollOffset}px)`;\n    };\n\n    const scrollParent = getScrollParent(parallaxRef.current || undefined);\n\n    if (scrollParent) {\n      scrollParentRef.current = scrollParent;\n      scrollParent.addEventListener(\"scroll\", handleScroll);\n    }\n\n    return () => {\n      if (!scrollParentRef.current) return;\n\n      scrollParentRef.current.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, [speed]);\n\n  return <Container ref={parallaxRef}>{children}</Container>;\n}\n","import styled from \"@emotion/styled\";\nimport { latLng, LatLngExpression, divIcon } from \"leaflet\";\nimport { useEffect, useRef } from \"react\";\nimport {\n  MapContainer,\n  GeoJSON,\n  useMap,\n  Circle,\n  FeatureGroup,\n  Rectangle,\n  Marker,\n} from \"react-leaflet\";\nimport { useAppSelector } from \"../../../../hooks\";\nimport BaseLayer from \"../../../../map/BaseLayer\";\nimport PointInfo from \"./PointInfo\";\nimport Legend from \"./Legend\";\nimport RefreshInformation from \"./RefreshInformation\";\nimport { DataList } from \"../../../../DataList\";\nimport { outputP3ColorFromRGB } from \"../../../../helpers/colors\";\nimport { css } from \"@emotion/react\";\nimport OSMAttribution from \"../../../../map/OSMAttribution\";\nimport MyPosition from \"../../../../map/MyPosition\";\nimport Parallax from \"../../../../shared/Parallax\";\n\nconst Container = styled.div`\n  overflow: hidden;\n`;\n\nconst StyledMapContainer = styled(MapContainer)`\n  height: 350px;\n  background: black; // suppress ios bottom sheet animation flicker\n\n  &,\n  .leaflet-pane * {\n    pointer-events: none !important;\n  }\n\n  .plane-icon {\n    background: none;\n    ${outputP3ColorFromRGB([255, 180, 0])}\n  }\n\n  .weather-geometry {\n    ${outputP3ColorFromRGB([255, 0, 0], \"stroke\")}\n    ${outputP3ColorFromRGB([255, 0, 0], \"fill\")}\n    z-index: 2;\n    position: relative;\n  }\n`;\n\nconst StyledDataList = styled(DataList)`\n  margin: 2rem 1rem 1rem;\n`;\n\nconst LegendContainer = styled.div`\n  position: relative;\n  z-index: 1;\n  background: var(--bg-bottom-sheet);\n`;\n\nexport default function ReportMetadata() {\n  const aviationWeather = useAppSelector(\n    (state) => state.weather.aviationWeather,\n  );\n  const windsAloft = useAppSelector((state) => state.weather.windsAloft);\n  const weather = useAppSelector((state) => state.weather.weather);\n\n  const showOp40 =\n    typeof windsAloft === \"object\" && windsAloft.source === \"rucSounding\";\n\n  return (\n    <Container>\n      <Parallax>\n        <StyledMapContainer\n          center={[41.683, -86.25]}\n          zoomControl={false}\n          attributionControl={false}\n          scrollWheelZoom={false}\n          dragging={false}\n          doubleClickZoom={false}\n          trackResize={false}\n          boxZoom={false}\n          maxZoom={9.25}\n          zoom={9}\n          zoomSnap={undefined}\n        >\n          <OSMAttribution />\n          <BaseLayer />\n          <MapController />\n        </StyledMapContainer>\n      </Parallax>\n\n      <LegendContainer>\n        <Legend\n          showTaf={!!(aviationWeather && typeof aviationWeather === \"object\")}\n          showNws={\n            !!(weather && typeof weather === \"object\" && \"geometry\" in weather)\n          }\n          showOp40={showOp40}\n        />\n\n        <StyledDataList>\n          <RefreshInformation />\n\n          <PointInfo />\n        </StyledDataList>\n      </LegendContainer>\n    </Container>\n  );\n}\n\nconst planeIcon = divIcon({\n  html: '<svg xmlns=\"http://www.w3.org/2000/svg\" xml:space=\"preserve\" viewBox=\"0 -0.03 45.7 45.73\"><path fill=\"currentColor\" d=\"m36.038 16.922 7.873-7.303c1.104-1.018 1.737-2.434 1.768-3.935.029-1.5-.562-2.94-1.623-4.002l-.058-.059C42.936.562 41.496-.028 39.996.001c-1.502.03-2.921.667-3.938 1.77l-7.302 7.873L4.57 1.321c-1.459-.504-2.893-.122-3.346.887L.142 4.631C-.31 5.642.363 6.967 1.71 7.719l18.991 10.612-8.547 9.216-4.842-1.046c-.527-.114-1.059.169-1.259.671l-.725 1.826c-.2.501.005 1.062.467 1.34l5.239 3.146 1.188 1.188 3.146 5.24c.278.461.844.659 1.346.461l1.821-.723c.503-.199.785-.729.672-1.255l-1.057-4.883 9.198-8.531L37.96 43.972c.753 1.348 2.077 2.021 3.089 1.568l2.421-1.082c1.011-.452 1.395-1.888.891-3.347l-8.323-24.189z\"/></svg>',\n  iconSize: [16, 16],\n  iconAnchor: [8, 8],\n  className: \"plane-icon\",\n});\n\nconst MapController = () => {\n  const windsAloft = useAppSelector((state) => state.weather.windsAloft);\n  const weather = useAppSelector((state) => state.weather.weather);\n  const aviationWeather = useAppSelector(\n    (state) => state.weather.aviationWeather,\n  );\n  if (!windsAloft || typeof windsAloft !== \"object\")\n    throw new Error(\"RAP report must be defined\");\n\n  const showOp40 =\n    typeof windsAloft === \"object\" && windsAloft.source === \"rucSounding\";\n\n  const map = useMap();\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const groupRef = useRef<any>();\n\n  const rapPosition: LatLngExpression = [\n    windsAloft.latitude,\n    windsAloft.longitude,\n  ];\n  const airportPosition: LatLngExpression | undefined =\n    aviationWeather && typeof aviationWeather === \"object\"\n      ? [aviationWeather.lat, aviationWeather.lon]\n      : undefined;\n\n  useEffect(() => {\n    if (groupRef.current)\n      map.fitBounds(groupRef.current.getBounds(), {\n        padding: [25, 25],\n      });\n  }, [map, groupRef]);\n\n  const bounds = latLng(rapPosition).toBounds(40000); // 13km for op40 analysis\n\n  return (\n    <FeatureGroup ref={groupRef}>\n      {showOp40 && (\n        <>\n          <Rectangle\n            bounds={bounds}\n            css={css`\n              ${outputP3ColorFromRGB([0, 0, 255], \"fill\")}\n              ${outputP3ColorFromRGB([0, 0, 255], \"stroke\")}\n            `}\n          />\n          <Circle\n            center={rapPosition}\n            fillOpacity={1}\n            radius={500}\n            css={css`\n              ${outputP3ColorFromRGB([0, 0, 255], \"fill\")}\n              ${outputP3ColorFromRGB([0, 0, 255], \"stroke\")}\n            `}\n          />\n        </>\n      )}\n\n      {airportPosition && (\n        <Marker position={airportPosition} icon={planeIcon} pane=\"markerPane\" />\n      )}\n\n      {weather &&\n        typeof weather === \"object\" &&\n        \"geometry\" in weather &&\n        weather.geometry && (\n          <GeoJSON\n            data={weather.geometry}\n            pathOptions={{\n              className: \"weather-geometry\",\n            }}\n            pane=\"markerPane\"\n          />\n        )}\n\n      <MyPosition />\n    </FeatureGroup>\n  );\n};\n"],"names":["constructNow","date","constructFrom","differenceInCalendarMonths","dateLeft","dateRight","_dateLeft","toDate","_dateRight","yearDiff","monthDiff","endOfDay","_date","endOfMonth","month","isLastDayOfMonth","differenceInMonths","sign","compareAsc","difference","result","isLastMonthNotFull","differenceInSeconds","options","diff","differenceInMilliseconds","getRoundingMethod","formatDistance","baseDate","defaultOptions","getDefaultOptions","locale","defaultLocale","minutesInAlmostTwoDays","comparison","localizeOptions","seconds","offsetInSeconds","getTimezoneOffsetInMilliseconds","minutes","months","minutesInDay","hours","minutesInMonth","days","nearestMonth","monthsSinceStartOfYear","years","formatDistanceToNow","FeatureGroup","createPathComponent","_c","ctx","group","LeafletFeatureGroup","createElementObject","extendContext","Marker","createLayerComponent","position","marker","LeafletMarker","props","prevProps","Rectangle","bounds","rectangle","LeafletRectangle","layer","DataList","target","name","styles","DataListItem","Container","_styled","CopyToClipboard","children","isOpen","setIsOpen","useState","refs","floatingStyles","useFloating","open","middleware","shift","offset","onClick","navigator","clipboard","writeText","useEffect","timeout","setTimeout","clearTimeout","jsxs","Fragment","jsx","setReference","TooltipContainer","setFloating","PointInfo","heightUnit","useAppSelector","state","user","heightUnitLabel","heightUnitFormatter","timeZone","weather","windsAloft","location","useParams","lat","lon","split","elevation","Error","altitudeInM","altitudes","showOp40","source","aloftSource","hourlySource","isInstalled","Math","round","heightValueFormatter","toLocaleString","getTimezoneOffsetLabel","SvgPlane","React.createElement","LegendItem","YourLocation","outputP3ColorFromRGB","process","WindsAloft","NWS","StyledPlaneSvg","PlaneSvg","Legend","showTaf","showNws","Label","RefreshInformation","windsAloftUpdated","_css","color","abs","differenceInMinutes","Date","undefined","capitalize","addSuffix","Parallax","speed","parallaxRef","useRef","scrollParentRef","handleScroll","parallaxElement","current","scrollParent","scrollOffset","scrollTop","style","transform","getScrollParent","addEventListener","removeEventListener","StyledMapContainer","MapContainer","StyledDataList","LegendContainer","ReportMetadata","aviationWeather","OSMAttribution","BaseLayer","MapController","planeIcon","divIcon","html","iconSize","iconAnchor","className","map","useMap","groupRef","rapPosition","latitude","longitude","airportPosition","fitBounds","getBounds","padding","latLng","toBounds","css","Circle","geometry","GeoJSON","MyPosition"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11]}